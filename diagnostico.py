import streamlit as st
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase, WebRtcMode, RTCConfiguration
import av
import time

st.set_page_config(page_title="üîç Diagn√≥stico WebRTC", layout="wide")

st.title("üîç Diagn√≥stico de Conexi√≥n WebRTC")

st.markdown("""
Esta herramienta te ayuda a identificar problemas con tu conexi√≥n WebRTC.
""")

# === Configuraci√≥n de prueba ===
col1, col2 = st.columns(2)

with col1:
    st.subheader("‚öôÔ∏è Configuraci√≥n de prueba")
    
    test_resolution = st.selectbox(
        "Resoluci√≥n",
        ["320x240", "640x480", "1280x720"],
        index=1
    )
    width, height = map(int, test_resolution.split('x'))
    
    test_fps = st.slider("FPS", 5, 30, 15, 5)
    
    use_multiple_stun = st.checkbox("Usar m√∫ltiples servidores STUN", value=True)

with col2:
    st.subheader("üìä Informaci√≥n del sistema")
    st.info(f"""
    **Navegador recomendado:** Chrome, Edge, Firefox
    
    **Requisitos m√≠nimos:**
    - üåê Internet: 2 Mbps
    - üíª CPU: Dual core
    - üìπ C√°mara web funcional
    """)

# === Procesador de diagn√≥stico ===
class DiagnosticProcessor(VideoProcessorBase):
    def __init__(self):
        self.frame_count = 0
        self.start_time = time.time()
        self.last_fps_update = time.time()
        self.fps = 0

    def recv(self, frame):
        self.frame_count += 1
        
        # Calcular FPS real
        current_time = time.time()
        if current_time - self.last_fps_update >= 1.0:
            elapsed = current_time - self.start_time
            self.fps = self.frame_count / elapsed if elapsed > 0 else 0
            self.last_fps_update = current_time
        
        img = frame.to_ndarray(format="bgr24")
        height, width = img.shape[:2]
        
        # Informaci√≥n en pantalla
        info_text = [
            f"Resolucion: {width}x{height}",
            f"FPS Real: {self.fps:.1f}",
            f"Frames: {self.frame_count}",
            f"Tiempo: {int(time.time() - self.start_time)}s"
        ]
        
        import cv2
        y_offset = 30
        for i, text in enumerate(info_text):
            cv2.putText(img, text, (10, y_offset + i*30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        
        # Cuadr√≠cula de referencia
        cv2.line(img, (width//2, 0), (width//2, height), (255, 0, 0), 1)
        cv2.line(img, (0, height//2), (width, height//2), (255, 0, 0), 1)
        
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# === Configuraci√≥n WebRTC ===
if use_multiple_stun:
    ice_servers = [
        {"urls": ["stun:stun.l.google.com:19302"]},
        {"urls": ["stun:stun1.l.google.com:19302"]},
        {"urls": ["stun:stun2.l.google.com:19302"]},
        {"urls": ["stun:stun3.l.google.com:19302"]},
        {"urls": ["stun:stun4.l.google.com:19302"]},
    ]
else:
    ice_servers = [{"urls": ["stun:stun.l.google.com:19302"]}]

RTC_CONFIGURATION = RTCConfiguration({
    "iceServers": ice_servers,
    "iceTransportPolicy": "all"
})

media_constraints = {
    "video": {
        "width": {"ideal": width},
        "height": {"ideal": height},
        "frameRate": {"ideal": test_fps, "max": test_fps}
    },
    "audio": False
}

# === Stream de prueba ===
st.markdown("---")
st.subheader("üìπ Prueba de c√°mara")

webrtc_ctx = webrtc_streamer(
    key=f"diagnostic-{width}-{height}-{test_fps}",
    mode=WebRtcMode.SENDRECV,
    video_processor_factory=DiagnosticProcessor,
    media_stream_constraints=media_constraints,
    rtc_configuration=RTC_CONFIGURATION,
    async_processing=True,
)

# === Estado de conexi√≥n ===
st.markdown("---")
st.subheader("üîå Estado de conexi√≥n")

if webrtc_ctx.state.playing:
    st.success("‚úÖ **Conexi√≥n establecida correctamente**")
    st.balloons()
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Estado", "üü¢ ACTIVO")
    with col2:
        st.metric("Resoluci√≥n", f"{width}x{height}")
    with col3:
        st.metric("FPS Objetivo", test_fps)
    
else:
    st.warning("‚ö†Ô∏è Esperando conexi√≥n...")
    st.info("üëÜ Presiona 'START' arriba para iniciar la prueba")

# === Recomendaciones ===
st.markdown("---")
with st.expander("üí° Interpretaci√≥n de resultados"):
    st.markdown("""
    ### ‚úÖ Se√±ales de buena conexi√≥n:
    - FPS real cercano al objetivo (¬±2 FPS)
    - Video fluido sin congelamientos
    - Latencia baja (< 500ms)
    
    ### ‚ö†Ô∏è Problemas comunes:
    
    **1. FPS muy bajo (< 10)**
    - üîΩ Reduce la resoluci√≥n
    - üìâ Baja los FPS objetivo
    - üåê Verifica tu internet
    
    **2. Video se congela**
    - üîÑ Recarga la p√°gina
    - üîå Cierra otras apps que usen la c√°mara
    - üåê Usa cable ethernet en vez de WiFi
    
    **3. No se conecta**
    - ‚úÖ Verifica permisos de c√°mara en el navegador
    - ‚úÖ Prueba otro navegador (Chrome recomendado)
    - ‚úÖ Desactiva VPN/Proxy
    - ‚úÖ Verifica firewall/antivirus
    
    **4. Calidad muy baja**
    - ‚¨ÜÔ∏è Aumenta resoluci√≥n gradualmente
    - üí° Mejora iluminaci√≥n
    - üìπ Limpia lente de c√°mara
    """)

with st.expander("üîß Soluciones avanzadas"):
    st.markdown("""
    ### Si nada funciona, intenta:
    
    1. **Usar servidores TURN (requiere cuenta Twilio)**
       - Crea cuenta gratuita en twilio.com
       - Obt√©n credenciales
       - Agrega a `secrets.toml`
    
    2. **Ejecutar localmente**
       ```bash
       streamlit run app.py
       ```
       Esto evita problemas de firewall/NAT
    
    3. **Verificar tu red**
       - Prueba en otra red WiFi
       - Usa datos m√≥viles como hotspot
       - Contacta a tu ISP si bloquea WebRTC
    """)
